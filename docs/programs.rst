Programs
========

All available programs are contained in the top-level directory where this package is installed. Programs are written in python and use the '.py' file extension.

All programs are configured by passing command-line options. Pass the `--help` option to view documentation for these options, e.g.::

	./simulate.py --help

This document provides an introduction to each of the available programs. Examples of running the programs are :doc:`documented elsewhere </examples>`.

.. _prog-simulate:

simulate
--------

The `simulate` program simulates a weak-lensing survey by performing fast image rendering with `galsim <https://github.com/GalSim-developers/GalSim>`_.

The program reads a :doc:`catalog of astronomical sources </catalog>` and produces a set of :doc:`output data products </output>`.  The outputs can be displayed using the `display` program.

.. _prog-display:

display
-------

The `display` program displays simulated images and analysis results stored in the FITS file generated by the `simulate` program.

Certain objects can be selected for highlighting and annotating. Use the `--galaxy` command-line arg to select a single galaxy using its unique database identifier (`db_id` in the :ref:`analysis-results`). Similarly, use `--group` to select all galaxies in an overlapping group identified by its `grp_id`.  The `--galaxy` and `--group` args can be repeated and combined and the resulting selection is the logical OR of each specification. More generally, objects can be selected using any expression of the variables in the :ref:`analysis-results` with the `--select` option. For example, the following args select objects that are visible and pass a minimum signal-to-noise ratio cut::

	./display.py --select 'visible' --select 'snr_iso > 10' ...

The `--select` arg can be repeated and the results will be combined with logical AND, followed by the logical OR of any `--galaxy` or `--group` args.

Pixel values are :func:`clipped <numpy.clip>` with limits based on percentiles of the histogram of non-zero pixel values for the selected objects. Use the `--clip-lo-percentile` and `--clip-hi-percentile` command-line args to change the defaults of 0 and 90 percent limits. Clipped pixel values are rescaled from zero to one and displayed using the DS9 `sqrt scale <http://ds9.si.edu/ref/how.html#Scales>`_.

Scaled pixel values are displayed using two colormaps: one for selected objects and another for background objects.  Use the `--highlight` and `--colormap` command-line args to change the defaults using any `named matplotlib colormap <http://matplotlib.org/examples/color/colormaps_reference.html>`_.

.. _prog-fisher:

fisher
------

The `fisher` program creates plots to illustrate galaxy parameter error estimation using Fisher matrices.

The program either calculates the Fisher matrix for a single galaxy (`--galaxy`) as if it were isolated, or else for an overlapping group of galaxies (`--group`). The displayed image consists of the lower-triangular part of a symmetric `npar x npar` matrix, where::

	npar = num_partials * num_galaxies

By default, the program displays the Fisher-matrix images whose sums (over pixels) give the Fisher matrix element values. Alternatively, you can display the partial derivative images (`--partials`), Fisher matrix elements (`--matrix`), covariance matrix elements (`--covariance`) or correlation coefficients matrix (`--correlation`).

Use the `--colormap` option to select the color map. The vertical color scales are optimized independently for each partial-derivative or Fisher-matrix image, but are guaranteed to use ranges that are symmetric about zero (so `diverging colormaps <http://matplotlib.org/examples/color/colormaps_reference.html>`_ are usually the best choice). When Fisher or covariance matrix elements are being displayed, their relative values are somewhat arbitrary since they generally have different units.  However, the dimensionless correlation coefficient matrix is always displayed using a scale range of [-1,+1].

.. _prog-dbquery:

dbquery
-------

Program to query the official LSST simulation galaxy catalog and write a text :doc:`catalog file </catalog>` in the format expected by the `simulate` program.  You do not normally need to run this program since suitable catalog files are already provided.
